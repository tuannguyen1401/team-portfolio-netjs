
import { Body, Controller, HttpCode, HttpException, HttpStatus, Post } from '@nestjs/common';
import TelegramBot from 'node-telegram-bot-api';

// --- Kh·ªüi t·∫°o Telegram bot (singleton ·ªü m·ª©c module) ---
const TOKEN = process.env.TELEGRAM_BOT_TOKEN;
const CHAT_ID = process.env.TELEGRAM_CHAT_ID;
const bot = TOKEN ? new TelegramBot(TOKEN, { polling: false }) : null;

// DTO t·ªëi gi·∫£n (3 field)
type ContactFormDto = {
  fullName: string; // H·ªç v√† t√™n
  email: string;    // Email
  message: string;  // Tin nh·∫Øn
};

@Controller('contact')
export class ContactController {
  @Post()
  @HttpCode(HttpStatus.CREATED)
  async sendToTelegram(@Body() body: ContactFormDto) {
    // Ki·ªÉm tra env
    if (!bot || !CHAT_ID) {
      throw new HttpException(
        'Server ch∆∞a c·∫•u h√¨nh TELEGRAM_BOT_TOKEN/TELEGRAM_CHAT_ID',
        HttpStatus.INTERNAL_SERVER_ERROR,
      );
    }

    // L·∫•y v√† l√†m s·∫°ch input
    const fullName = (body.fullName ?? '').trim();
    const email = (body.email ?? '').trim();
    const message = (body.message ?? '').trim();

    // Validate si√™u g·ªçn
    if (!fullName || !email || !message) {
      throw new HttpException('Thi·∫øu tr∆∞·ªùng fullName/email/message', HttpStatus.BAD_REQUEST);
    }
    if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email)) {
      throw new HttpException('Email kh√¥ng h·ª£p l·ªá', HttpStatus.BAD_REQUEST);
    }

    // N·ªôi dung g·ª≠i Telegram
    const text =
      `üì© *Contact Form m·ªõi*\n` +
      `‚Ä¢ H·ªç v√† t√™n: ${fullName}\n` +
      `‚Ä¢ Email: ${email}\n` +
      `‚Ä¢ Tin nh·∫Øn:\n${message}`;

    // G·ª≠i (d√πng Markdown ƒë∆°n gi·∫£n, fallback text n·∫øu l·ªói)
    try {
      await bot.sendMessage(CHAT_ID, text, { parse_mode: 'Markdown' });
    } catch {
      // N·∫øu Markdown l·ªói (k√Ω t·ª± ƒë·∫∑c bi·ªát), g·ª≠i l·∫°i plain-text
      await bot.sendMessage(CHAT_ID, text);
    }

    return { ok: true, message: 'ƒê√£ g·ª≠i th√†nh c√¥ng' };
  }
}
